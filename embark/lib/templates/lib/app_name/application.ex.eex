defmodule <%= app_module %>.Application do
  @moduledoc false

  use Application

  def start(_type, _args) do
    import Supervisor.Spec, warn: false

    tls_options = [
      certificate: certificate_path(),
      certificate_key: certificate_key_path()
    ]

    {:ok, config} = fetch_env(:<%= app_name %>, WWW)
    {:ok, port} = fetch_env(:<%= app_name %>, :port)
    {:ok, secure_port} = fetch_env(:<%= app_name %>, :secure_port)

    children = [
      worker(<%= app_module %>.WWW, [config, [port: port]], id: :http),
      worker(<%= app_module %>.WWW, [config, [port: secure_port, tls: tls_options]], id: :https)
    ]

    opts = [strategy: :one_for_one, name: <%= app_module %>.Supervisor]
    Supervisor.start_link(children, opts)
  end

  defp certificate_path() do
    Application.app_dir(:<%= app_name %>, "priv/localhost/certificate.pem")
  end

  defp certificate_key_path() do
    Application.app_dir(:<%= app_name %>, "priv/localhost/certificate_key.pem")
  end

  defp fetch_env(app, key) do
    case Application.fetch_env(app, key) do
      {:ok, config} ->
        fetch_value(config)
      :error ->
        {:error, :missing_config}
    end
  end

  defp fetch_value({:system, type, env_name, default}) do
    if raw = System.get_env(env_name) do
      cast(type, raw)
    else
      {:ok, default}
    end
  end
  defp fetch_value(value) do
    {:ok, value}
  end

  defp cast(:string, raw) do
    {:ok, raw}
  end

  defp cast(:integer, raw) do
    case Integer.parse(raw) do
      {port, ""} ->
        {:ok, port}
      _ ->
        {:error, :invalid_integer}
    end
  end
end

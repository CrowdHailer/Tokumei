defmodule <%= @module %>.Mixfile do
  use Mix.Project

  def project do
    [
      app: :<%= @name %>,
      version: "0.1.0",
      elixir: "~> <%= System.version %>",
      elixirc_paths: elixirc_paths(Mix.env()),
      build_embedded: Mix.env == :prod,
      start_permanent: Mix.env == :prod,
      deps: deps(),
      aliases: aliases()
    ]<%= if @docker do %>
    |> Keyword.merge(docker_specific_project_opts())<% end %>
  end

  def application do
    [extra_applications: [:logger], mod: {<%= @module %>.Application, []}]
  end

  defp elixirc_paths(:test), do: ["lib", "test/support"]
  defp elixirc_paths(_), do: ["lib"]

  defp deps do
    [
      {:ace, "~> 0.18.0"},<%= if @api_blueprint do %>
      {:raxx_api_blueprint, "~> 0.1.0"},<% end %>
      {:raxx_static, "~> 0.7.0"},<%= if @exsync do %>
      {:exsync, "~> 0.2.3", only: :dev},<% end %><%= if @ecto do %>
      {:postgrex, ">= 0.0.0"},
      {:ecto_sql, "~> 3.0.0"}<% end %>
    ]
  end

  defp aliases() do
    [<%= if @ecto do %>
      test: ["ecto.create --quiet", "ecto.migrate", "test"]<% end %>
    ]
  end
<%= if @docker do %>
  # makes sure that if the project is run by docker-compose inside a container,
  # its artifacts won't pollute the host's checkout directory
  defp docker_specific_project_opts() do
    if System.get_env("INSIDE_CONTAINER") do
      [
        build_path: "../_build",
        deps_path: "../deps"
      ]
    else
      []
    end
  end<% end %>
end
